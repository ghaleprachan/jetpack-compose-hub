// Generated by Dagger (https://dagger.dev).
package app.prachang.dummy_data.di;

import android.content.Context;
import app.prachang.dummy_data.data.database.AppRoomDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class StorageModule_ProvideRoomDatabaseFactory implements Factory<AppRoomDatabase> {
  private final Provider<Context> contextProvider;

  private final Provider<CoroutineScope> scopeProvider;

  public StorageModule_ProvideRoomDatabaseFactory(Provider<Context> contextProvider,
      Provider<CoroutineScope> scopeProvider) {
    this.contextProvider = contextProvider;
    this.scopeProvider = scopeProvider;
  }

  @Override
  public AppRoomDatabase get() {
    return provideRoomDatabase(contextProvider.get(), scopeProvider.get());
  }

  public static StorageModule_ProvideRoomDatabaseFactory create(Provider<Context> contextProvider,
      Provider<CoroutineScope> scopeProvider) {
    return new StorageModule_ProvideRoomDatabaseFactory(contextProvider, scopeProvider);
  }

  public static AppRoomDatabase provideRoomDatabase(Context context, CoroutineScope scope) {
    return Preconditions.checkNotNullFromProvides(StorageModule.INSTANCE.provideRoomDatabase(context, scope));
  }
}
